# USERS
type User {
    id: ID
    username: String
    email: String
    role: UserRole
}

input UserInput {
    username: String!
    email: String
    password: String!
    role: UserRole!
}
enum UserRole {
    ADMIN
    SALES_MANAGER,
    SALES_REP
}



# CUSTOMER
type Customer {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    phone: String
    company: String
}
input CustomerInput {
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    company: String!
}



# Opportunity
enum OpportunityStage {
    LEAD
    QUALIFIED
    PROPOSAL
    NEGOTIATION
    CLOSED_WON
    CLOSED_LOST
}
type Opportunity {
    id: ID
    customer: Customer
    title: String
    amount: Float
    stage: OpportunityStage
    expectedCloseDate: String
}

input OpportunityInput {
    customerId: ID!
    title: String!
    amount: Float!
    stage: OpportunityStage!
    expectedCloseDate: String!
}



# Task
enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}
enum TaskPriority {
    HIGH
    MEDIUM
    LOW
}
type Task {
    id: ID!
    customer: Customer!
    opportunity: Opportunity!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedTo: User
}
input TaskInput {
    customerId: ID!
    opportunityId: ID!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedToUserId: ID
}



#Service Package
enum ServiceType {
    SOCIAL_MEDIA,
    SEO,
    PPC,
    CONTENT,
    EMAIL,
    BRANDING
}

enum Complexity {
    BASIC,
    STANDARD,
    PREMIUM
}
enum Frequency {
    DAILY
    WEEKLY
    MONTHLY
    ANNUALLY
}
enum SocialNetworkPlatform {
    FACEBOOK
    INSTAGRAM
    TWITTER
    LINKEDIN
    TIKTOK
}
type ServicePackage {
    id: ID!
    name: String!
    description: String
    price: Float!
    serviceType: ServiceType!
    deliverables: String
    estimatedHours: Int!
    complexity: Complexity!
    isRecurring: Boolean!
    frequency: Frequency
    projectDuration: Int
    kpis: [String!]!
    socialNetworkPlatforms: [SocialNetworkPlatform!]!
    active: Boolean!
    createdAt: String!
    updatedAt: String!
}
input ServicePackageInput {
    name: String!
    description: String
    price: Float!
    serviceType: ServiceType!
    deliverables: String
    estimatedHours: Int!
    complexity: Complexity!
    isRecurring: Boolean!
    frequency: Frequency
    projectDuration: Int
    kpis: [String!]!
    socialNetworkPlatforms: [SocialNetworkPlatform!]!
    active: Boolean!
}

# Quote
type Quote {
    id: ID!
    customer: Customer!
    opportunity: Opportunity
    validUntil: String!
    subTotal: Float!
    discount: Float!
    totalAmount: Float!
    status: QuoteStatus!
    items: [QuoteItem!]!
    createdAt: String!
    updatedAt: String!
}
input QuoteInput {
    customerId: ID!
    opportunityId: ID!
    validUntil: String!
    status: QuoteStatus!
    items: [QuoteItemInput!]!
}
# Quote Item
type QuoteItem {
    id: ID!
    quote: Quote!
    servicePackage: ServicePackage!
    unitPrice: Float!
    total: Float!
    discountPercentage: Float!
    discount: Float!
}
input QuoteItemInput {
    servicePackageId: ID!
    discountPercentage: Float!
}
enum QuoteStatus {
    DRAFT
    SENT
    ACCEPTED
    REJECTED
}


# Interaction
type Interaction {
    id: ID!
    customer: Customer!
    type: InteractionType!
    dateTime: String!
    description: String
    outcome: String!
    feedbackType: FeedbackType
    channelPreference: String
    createdAt: String!
    updatedAt: String!
}
input InteractionInput {
    customerId: ID!
    type: InteractionType!
    dateTime: String!
    description: String
    outcome: String!
    feedbackType: FeedbackType
    channelPreference: String
}
enum InteractionType {
    EMAIL
    CALL
    MEETING
    NOTE
}

enum FeedbackType {
    CONTENT_REVIEW
    CAMPAIGN_PERFORMANCE
    STRATEGY
}


# Deals
type Deal {
    id: ID!
    customer: Customer!
    opportunity: Opportunity!
    dealStatus: DealStatus!
    finalAmount: Float!
    startDate: String!
    endDate: String
    campaignManager: User
    services: [ServicePackage!]!
    deliverables: String
    terms: String
}
input DealInput {
    opportunityId: ID!
    dealStatus: DealStatus!
    finalAmount: Float!
    startDate: String!
    endDate: String
    campaignManagerId: ID
    deliverables: String
    terms: String
    servicePackageIds: [ID!]!
}
enum DealStatus {
    SIGNED
    PAID
    IN_PROGRESS
    COMPLETED
}





type Property {
    key: String!
    value: String!
}

input PropertyInput {
    key: String!
    value: String!
}

# MARKETING #
# Type for CampaignActivity
scalar JSON

type CampaignActivity {
    id: ID!
    name: String!
    description: String
    activityType: ActivityType!
    plannedStartDate: String!
    plannedEndDate: String!
    actualStartDate: String
    actualEndDate: String
    status: ActivityStatus!
    plannedCost: Float!
    actualCost: Float
    assignedTo: String
    successCriteria: String
    targetAudience: String
    deliveryChannel: String
}

# Input for creating a new CampaignActivity
input CampaignActivityInput {
    name: String!
    description: String
    activityType: ActivityType!
    plannedStartDate: String!
    plannedEndDate: String!
    plannedCost: Float!
    successCriteria: String
    targetAudience: String
    deliveryChannel: String
    campaignId: ID!
}

# Enum for ActivityType
enum ActivityType {
    ADVERTISEMENT
    EMAIL_CAMPAIGN
    SOCIAL_MEDIA_POST
    EVENT
    OTHER
}

# Enum for ActivityStatus
enum ActivityStatus {
    PLANNED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

# Type for CampaignAttribution
type CampaignAttribution {
    id: ID!
    dealId: ID!
    campaignId: ID!
    attributionModel: AttributionModel!
    attributionPercentage: Float!
    attributedRevenue: Float
    firstTouchDate: String
    lastTouchDate: String
    touchCount: Int
}

# Input for creating a new CampaignAttribution
input CampaignAttributionInput {
    dealId: ID!
    campaignId: ID!
    attributionModel: AttributionModel!
    attributionPercentage: Float!
    attributedRevenue: Float
    touchCount: Int
}

# Enum for AttributionModel
enum AttributionModel {
    FIRST_TOUCH
    LAST_TOUCH
    LINEAR
    TIME_DECAY
    POSITION_BASED
    CUSTOM
}

# Type for CampaignInteraction
type CampaignInteraction {
    id: ID!
    campaignId: ID!
    customerId: ID!
    marketingInteractionType: MarketingInteractionType!
    interactionDate: String!
    sourceChannel: String
    sourceMedium: String
    sourceCampaign: String
    deviceType: String
    ipAddress: String
    geoLocation: String
    properties: JSON
    details: String
    resultedDealId: ID
    conversionValue: Float
}

# Input for creating a new CampaignInteraction
input CampaignInteractionInput {
    campaignId: ID!
    customerId: ID!
    marketingInteractionType: MarketingInteractionType!
    interactionDate: String!
    sourceChannel: String
    sourceMedium: String
    sourceCampaign: String
    deviceType: String
    ipAddress: String
    geoLocation: String
    properties: JSON
    details: String
    resultedDealId: ID
    conversionValue: Float
}

# Enum for MarketingInteractionType
enum MarketingInteractionType {
    CLICK
    VIEW
    SHARE
    COMMENT
    LIKE
    DOWNLOAD
    PURCHASE
    OTHER
}

# Type for CustomerSegment
type CustomerSegment {
    id: ID!
    name: String!
    description: String
    segmentCriteria: String
    dynamic: Boolean!
    rules: JSON
    campaignIds: [ID!]
    customerIds: [ID!]
    lastUpdated: String
}

# Input for creating a new CustomerSegment
input CustomerSegmentInput {
    name: String!
    description: String
    segmentCriteria: String
    dynamic: Boolean
    rules: JSON
}


# Type for CampaignMetric
type CampaignMetric {
    id: ID!
    campaignId: ID!
    name: String!
    description: String
    type: MetricType!
    value: Float
    targetValue: Float!
    measurementUnit: String
    lastCalculated: String
    calculationFormula: String
    dataSource: String
    automated: Boolean!
}

# Input for creating a new CampaignMetric
input CampaignMetricInput {
    campaignId: ID!
    name: String!
    description: String
    type: MetricType!
    value: Float
    targetValue: Float!
    measurementUnit: String
    calculationFormula: String
    dataSource: String
    automated: Boolean
}

# Enum for MetricType
enum MetricType {
    COUNT
    CURRENCY
    PERCENTAGE
    DURATION
    COST
}

# Type for MarketingCampaign
type MarketingCampaign {
    id: ID!
    name: String!
    description: String
    startDate: String!
    endDate: String
    budget: Float
    costToDate: Float
    status: CampaignStatus!
    type: CampaignType!
    targetAudience: String
    successCriteria: String
    targets: JSON
    relatedDealIds: [ID!]
    targetSegmentIds: [ID!]
}

# Input for creating a new MarketingCampaign
input MarketingCampaignInput {
    name: String!
    description: String
    startDate: String!
    endDate: String
    budget: Float
    targetAudience: String
    successCriteria: String
    targets: JSON
    type: CampaignType!
}

# Enum for CampaignStatus
enum CampaignStatus {
    DRAFT
    ACTIVE
    PAUSED
    COMPLETED
    CANCELLED
}

# Enum for CampaignType
enum CampaignType {
    EMAIL,
    SOCIAL_MEDIA,
    CONTENT_MARKETING,
    EVENT,
    WEBINAR,
    PPC,
    SEO,
    DIRECT_MAIL,
    SMS,
    REFERRAL,
    AFFILIATE,
    INFLUENCER,
    PR,
    TRADE_SHOW,
    PRINT,
    TV,
    RADIO,
    REMARKETING,
    MULTI_CHANNEL,
    OTHER
}


input PageInput {
    page: Int!
    size: Int!
}

# Queries
type Query {
    #CRM
    getAllUsers(input: PageInput!): [User!]!
    getUserById(id: ID!): User

    getAllCustomers(input: PageInput!): [Customer!]!
    getCustomerById(id: ID!): Customer

    getAllOpportunities(input: PageInput!): [Opportunity!]!
    getOpportunityById(id: ID!): Opportunity

    getAllTasks(input: TaskInput!): [Task!]!
    getTaskById(id: ID!): Task

    getAllServicePackages(input: PageInput!): [ServicePackage!]!
    getServicePackageById(id: ID!): ServicePackage

    getAllQuotes(input: PageInput!): [Quote!]!
    getQuoteById(id: ID!): Quote

    getAllInteractions(input: PageInput!): [Interaction]!
    getInteractionById(id: ID!): Interaction

    getAllDeals(input: PageInput!): [Deal]!
    getDealById(id: ID!): Deal


    #Marketing
    getActivityById(id: ID!): CampaignActivity
    getAttributionById(id: ID!): CampaignAttribution
    getCampaignInteractionById(id: ID!): CampaignInteraction
    getMetricById(id: ID!): CampaignMetric
    getCampaignById(id: ID!): MarketingCampaign
    getSegmentById(id: ID!): CustomerSegment
}


#Mutations
type Mutation {
    # CRM
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!

    createCustomer(input: CustomerInput!): Customer!
    updateCustomer(id: ID!, input: CustomerInput!): Customer!
    deleteCustomer(id: ID!): Boolean!

    createOpportunity(input: OpportunityInput!): Opportunity!
    updateOpportunity(id: ID!, input: OpportunityInput!): Opportunity!
    deleteOpportunity(id: ID!): Boolean!

    createTask(input: TaskInput!): Task!
    updateTask(id: ID!, input: TaskInput!): Task!
    deleteTask(id: ID!): Boolean!

    createServicePackage(input: ServicePackageInput!): ServicePackage!
    updateServicePackage(id: ID!, input: ServicePackageInput!): ServicePackage!
    deleteServicePackage(id: ID!): Boolean!

    createQuote(input: QuoteInput!): Quote!
    addQuoteItem(id: ID!, input: QuoteItemInput!): Quote!
    deleteQuoteItem(itemId: ID!): Quote!
    deleteQuote(id: ID!): Boolean!

    createInteraction(input: InteractionInput!): Interaction!
    updateInteraction(id: ID!, input: InteractionInput!): Interaction!
    deleteInteraction(id: ID!): Boolean!

    createDeal(input: DealInput!): Deal!
    updateDeal(id: ID!, input: DealInput!): Deal!
    deleteDeal(id: ID!): Boolean!

    # Marketing Campaign
    createActivity(input: CampaignActivityInput!): CampaignActivity!
    updateActivity(id: ID!, input: CampaignActivityInput!): CampaignActivity!
    deleteActivity(id: ID!): Boolean!

    createCampaignInteraction(input: CampaignInteractionInput!): CampaignInteraction!
    updateCampaignInteraction(id: ID!, input: CampaignInteractionInput!): CampaignInteraction!
    deleteCampaignInteraction(id: ID!): Boolean!

    createAttribution(input: CampaignAttributionInput!): CampaignAttribution!
    updateAttribution(id: ID!, input: CampaignAttributionInput!): CampaignAttribution!
    deleteAttribution(id: ID!): Boolean!

    createMetric(input: CampaignMetricInput!): CampaignMetric!
    updateMetric(id: ID!, input: CampaignMetricInput!): CampaignMetric!
    deleteMetric(id: ID!): Boolean!

    createCampaign(input: MarketingCampaignInput!): MarketingCampaign!
    updateCampaign(id: ID!, input: MarketingCampaignInput!): MarketingCampaign!
    deleteCampaign(id: ID!): Boolean!

    createSegment(input: CustomerSegmentInput!): CustomerSegment!
    updateSegment(id: ID!, input: CustomerSegmentInput!): CustomerSegment!
    deleteSegment(id: ID!): Boolean!
}