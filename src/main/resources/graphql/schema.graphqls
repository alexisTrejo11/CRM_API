# USERS
type User {
    id: ID
    username: String
    email: String
    role: UserRole
}

input UserInput {
    username: String!
    email: String
    password: String!
    role: UserRole!
}
enum UserRole {
    ADMIN
    SALES_MANAGER,
    SALES_REP
}



# CUSTOMER
type Customer {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    phone: String
    company: String
}
input CustomerInput {
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    company: String!
}

# ServicePackage


# Opportunity
enum OpportunityStage {
    LEAD
    QUALIFIED
    PROPOSAL
    NEGOTIATION
    CLOSED_WON
    CLOSED_LOST
}
type Opportunity {
    id: ID
    customer: Customer
    title: String
    amount: Float
    stage: OpportunityStage
    expectedCloseDate: String
}

input OpportunityInput {
    customerId: ID!
    title: String!
    amount: Float!
    stage: OpportunityStage!
    expectedCloseDate: String!
}


# Task
enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}
enum TaskPriority {
    HIGH
    MEDIUM
    LOW
}
type Task {
    id: ID!
    customer: Customer!
    opportunity: Opportunity!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedTo: User
}
input TaskInput {
    customerId: ID!
    opportunityId: ID!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedToUserId: ID
}


# Queries
type Query {
    getAllUsers(input: PageInput!): [User!]!
    getUserById(id: ID!): User

    getAllCustomers(input: CustomerInput!): [Customer!]!
    getCustomerById(id: ID!): Customer

    getAllOpportunities(input: OpportunityInput!): [Opportunity!]!
    getOpportunityById(id: ID!): Opportunity

    getAllTasks(input: TaskInput!): [Task!]!
    getTaskById(id: ID!): Task
}


input PageInput {
    page: Int!
    size: Int!
}


#Mutations
type Mutation {
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!

    createCustomer(input: CustomerInput!): Customer!
    updateCustomer(id: ID!, input: CustomerInput!): Customer!
    deleteCustomer(id: ID!): Boolean!

    createOpportunity(input: OpportunityInput!): Opportunity!
    updateOpportunity(id: ID!, input: OpportunityInput!): Opportunity!
    deleteOpportunity(id: ID!): Boolean!

    createTask(input: TaskInput!): Task!
    updateTask(id: ID!, input: TaskInput!): Task!
    deleteTask(id: ID!): Boolean!
}
