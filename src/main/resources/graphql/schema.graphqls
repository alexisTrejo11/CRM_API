# USERS
type User {
    id: ID
    username: String
    email: String
    role: UserRole
}

input UserInput {
    username: String!
    email: String
    password: String!
    role: UserRole!
}
enum UserRole {
    ADMIN
    SALES_MANAGER,
    SALES_REP
}



# CUSTOMER
type Customer {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    phone: String
    company: String
}
input CustomerInput {
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    company: String!
}



# Opportunity
enum OpportunityStage {
    LEAD
    QUALIFIED
    PROPOSAL
    NEGOTIATION
    CLOSED_WON
    CLOSED_LOST
}
type Opportunity {
    id: ID
    customer: Customer
    title: String
    amount: Float
    stage: OpportunityStage
    expectedCloseDate: String
}

input OpportunityInput {
    customerId: ID!
    title: String!
    amount: Float!
    stage: OpportunityStage!
    expectedCloseDate: String!
}



# Task
enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}
enum TaskPriority {
    HIGH
    MEDIUM
    LOW
}
type Task {
    id: ID!
    customer: Customer!
    opportunity: Opportunity!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedTo: User
}
input TaskInput {
    customerId: ID!
    opportunityId: ID!
    title: String!
    description: String
    dueDate: String!
    status: TaskStatus!
    priority: TaskPriority!
    assignedToUserId: ID
}



#Service Package
enum ServiceType {
    SOCIAL_MEDIA,
    SEO,
    PPC,
    CONTENT,
    EMAIL,
    BRANDING
}

enum Complexity {
    BASIC,
    STANDARD,
    PREMIUM
}
enum Frequency {
    DAILY
    WEEKLY
    MONTHLY
    ANNUALLY
}
enum SocialNetworkPlatform {
    FACEBOOK
    INSTAGRAM
    TWITTER
    LINKEDIN
    TIKTOK
}
type ServicePackage {
    id: ID!
    name: String!
    description: String
    price: Float!
    serviceType: ServiceType!
    deliverables: String
    estimatedHours: Int!
    complexity: Complexity!
    isRecurring: Boolean!
    frequency: Frequency
    projectDuration: Int
    kpis: [String!]!
    socialNetworkPlatforms: [SocialNetworkPlatform!]!
    active: Boolean!
    createdAt: String!
    updatedAt: String!
}
input ServicePackageInput {
    name: String!
    description: String
    price: Float!
    serviceType: ServiceType!
    deliverables: String
    estimatedHours: Int!
    complexity: Complexity!
    isRecurring: Boolean!
    frequency: Frequency
    projectDuration: Int
    kpis: [String!]!
    socialNetworkPlatforms: [SocialNetworkPlatform!]!
    active: Boolean!
}

# Quote
type Quote {
    id: ID!
    customer: Customer!
    opportunity: Opportunity
    validUntil: String!
    subTotal: Float!
    discount: Float!
    totalAmount: Float!
    status: QuoteStatus!
    items: [QuoteItem!]!
    createdAt: String!
    updatedAt: String!
}
input QuoteInput {
    customerId: ID!
    opportunityId: ID
    validUntil: String!
    subTotal: Float!
    discount: Float
    totalAmount: Float!
    status: QuoteStatus!
    items: [QuoteItemInput!]!
}
# Quote Item
type QuoteItem {
    id: ID!
    quote: Quote!
    servicePackage: ServicePackage!
    unitPrice: Float!
    total: Float!
    discountPercentage: Float!
    discount: Float!
    createdAt: String!
    updatedAt: String!
}
input QuoteItemInput {
    servicePackageId: ID!
    unitPrice: Float!
    total: Float!
    discountPercentage: Float!
    discount: Float!
}
enum QuoteStatus {
    DRAFT
    SENT
    ACCEPTED
    REJECTED
}


input PageInput {
    page: Int!
    size: Int!
}


# Queries
type Query {
    getAllUsers(input: PageInput!): [User!]!
    getUserById(id: ID!): User

    getAllCustomers(input: PageInput!): [Customer!]!
    getCustomerById(id: ID!): Customer

    getAllOpportunities(input: PageInput!): [Opportunity!]!
    getOpportunityById(id: ID!): Opportunity

    getAllTasks(input: TaskInput!): [Task!]!
    getTaskById(id: ID!): Task

    getAllServicePackages(input: PageInput!): [ServicePackage!]!
    getServicePackageById(id: ID!): ServicePackage
}


#Mutations
type Mutation {
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!

    createCustomer(input: CustomerInput!): Customer!
    updateCustomer(id: ID!, input: CustomerInput!): Customer!
    deleteCustomer(id: ID!): Boolean!

    createOpportunity(input: OpportunityInput!): Opportunity!
    updateOpportunity(id: ID!, input: OpportunityInput!): Opportunity!
    deleteOpportunity(id: ID!): Boolean!

    createTask(input: TaskInput!): Task!
    updateTask(id: ID!, input: TaskInput!): Task!
    deleteTask(id: ID!): Boolean!

    createServicePackage(input: ServicePackageInput!): ServicePackage!
    updateServicePackage(id: ID!, input: ServicePackageInput!): ServicePackage!
    deleteServicePackage(id: ID!): Boolean!
}
